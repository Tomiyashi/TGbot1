import datetime
import sqlite3
from hui import AlreadySubError
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from geyporno import send_message_monday, send_message_tuesday, send_message_wednesday, send_message_thursday, send_message_friday, send_message_saturday
from data import monday, tuesday, wednesday, thursday, friday, saturday

TOKEN_API = '5974312085:AAFXoviRvo7w6FRUg9mdkMGN7E19dJzhd0I'

bot = Bot(TOKEN_API)
dp = Dispatcher(bot)

# Connect to the SQLite database
conn = sqlite3.connect('subscribers.db')
c = conn.cursor()

# Create the subscribers table if it doesn't exist
c.execute('''CREATE TABLE IF NOT EXISTS subscribers (chat_id INTEGER PRIMARY KEY)''')

ckb = InlineKeyboardMarkup(row_width=2)
ckb.add(InlineKeyboardButton('–ù–∞–∑–∞–¥üë®üèº‚Äçü¶Ω', callback_data='Back'))

kb = ReplyKeyboardMarkup()
kb.add(KeyboardButton('ü§ó–ó–∞—á–µ–º —è –Ω—É–∂–µ–Ωü§ó'))
kb.add(KeyboardButton('ü•∂–®–∫–æ–ª–∞ü•∂'))
kb.add(KeyboardButton('üß†–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—Éüß†'))


@dp.message_handler(text= 'üß†–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—Éüß†')
async def subscribe(message: types.Message):
    try:
        chat_id = message.from_user.id
        c.execute("INSERT INTO subscribers (chat_id) VALUES (?)", (chat_id,))
        conn.commit()
        await message.reply("üëçüèº–í–´ –°–î–ï–õ–ê–õ–ò –ê–•–£–ï–ù–ù–ûüëçüèº")
    except sqlite3.IntegrityError:
        await message.reply('–ù–ï –ö–õ–ò–ö–ê–ô –°–Æ–î–ê –ë–û–õ–¨–®–ï')
        await bot.send_sticker(message.from_user.id,
                                     sticker='CAACAgIAAxkBAAEHa9Vj0F00v0npxjkDAom7ZIQ3EQZ6lgACGhUAAru3aUjlYr57-57PNC0E')


@dp.message_handler(text= 'ü§ó–ó–∞—á–µ–º —è –Ω—É–∂–µ–Ωü§ó')
async def help_command(message: types.Message):
    await message.answer('<em><b>–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –≤–∞—à–µ–º —à–∫–æ–ª—å–Ω–æ–º —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ</b></em>',
                         parse_mode="HTML")
    await message.delete()


@dp.message_handler(commands=['start'])
async def help_command(message: types.Message):
    await message.answer(text='<em><b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç!</b></em>', parse_mode="HTML",
                         reply_markup=kb)
    await bot.send_sticker(message.from_user.id,
                           sticker="CAACAgIAAxkBAAEHa9lj0F4VT3V4r6xGOAFoT_Jj4GlvygACWBcAAhcbIEiLeUa9nKxvcy0E")
    await message.delete()


@dp.message_handler(text= 'ü•∂–®–∫–æ–ª–∞ü•∂')
async def help_command(message: types.Message):
    ikb = InlineKeyboardMarkup(row_width=2)
    ikb.add(InlineKeyboardButton('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ü•≥',
                                 callback_data='Monday'))
    ikb.add(InlineKeyboardButton('–í—Ç–æ—Ä–Ω–∏–∫ü´°',
                                 callback_data='Tuesday'))
    ikb.add(InlineKeyboardButton('–°—Ä–µ–¥–∞ü´•',
                                 callback_data='Wednesday'))
    ikb.add(InlineKeyboardButton('–ß–µ—Ç–≤–µ—Ä–≥ü§¢',
                                 callback_data='Thursday'))
    ikb.add(InlineKeyboardButton('–ü—è—Ç–Ω–∏—Ü–∞ü•±',
                                 callback_data='Friday'))
    ikb.add(InlineKeyboardButton('–°—É–±–±–æ—Ç–∞üë∫',
                                 callback_data='Saturday'))
    await message.answer('<em><b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b></em>', parse_mode="HTML",
                         reply_markup=ikb)
    await message.delete()


@dp.callback_query_handler(text= 'Monday')
async def M(callback: types.CallbackQuery):
    await callback.message.answer(
        text=monday,
        parse_mode="HTML",
        reply_markup=ckb)
    await callback.message.delete()


@dp.callback_query_handler(text= 'Tuesday')
async def V(callback: types.CallbackQuery):
    await callback.message.answer(
        text=tuesday,
        parse_mode="HTML",
        reply_markup=ckb)
    await callback.message.delete()


@dp.callback_query_handler(text= 'Wednesday')
async def G(callback: types.CallbackQuery):
    await callback.message.answer(
        text=wednesday,
        parse_mode="HTML",
        reply_markup=ckb)
    await callback.message.delete()


@dp.callback_query_handler(text= 'Thursday')
async def D(callback: types.CallbackQuery):
    await callback.message.answer(
        text=thursday,
        parse_mode="HTML",
        reply_markup=ckb)
    await callback.message.delete()


@dp.callback_query_handler(text= 'Friday')
async def E(callback: types.CallbackQuery):
    await callback.message.answer(
        text=friday,
        parse_mode="HTML",
        reply_markup=ckb)
    await callback.message.delete()


@dp.callback_query_handler(text= 'Saturday')
async def L(callback: types.CallbackQuery):
    await callback.message.answer(
        text=saturday,
        parse_mode="HTML",
        reply_markup=ckb)
    await callback.message.delete()


@dp.callback_query_handler(text= 'Back')
async def C(callback: types.CallbackQuery):
    ikb = InlineKeyboardMarkup(row_width=2)
    ikb.add(InlineKeyboardButton('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ü•≥',
                                 callback_data='Monday'))
    ikb.add(InlineKeyboardButton('–í—Ç–æ—Ä–Ω–∏–∫ü´°',
                                 callback_data='Tuesday'))
    ikb.add(InlineKeyboardButton('–°—Ä–µ–¥–∞ü´•',
                                 callback_data='Wednesday'))
    ikb.add(InlineKeyboardButton('–ß–µ—Ç–≤–µ—Ä–≥ü§¢',
                                 callback_data='Thursday'))
    ikb.add(InlineKeyboardButton('–ü—è—Ç–Ω–∏—Ü–∞ü•±',
                                 callback_data='Friday'))
    ikb.add(InlineKeyboardButton('–°—É–±–±–æ—Ç–∞üë∫',
                                 callback_data='Saturday'))
    await callback.message.answer('<em><b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b></em>', parse_mode="HTML",
                                  reply_markup=ikb)
    await callback.message.delete()


def schedule_messages():
    cursor = conn.cursor()
    cursor.execute("SELECT chat_id FROM subscribers")
    chat_ids = cursor.fetchall()
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(send_message_monday, trigger='cron', kwargs={'bot' : bot},
                      hour=datetime.datetime.now().hour, minute=datetime.datetime.now().minute + 1)
    scheduler.add_job(send_message_tuesday, trigger='cron', kwargs={'bot' : bot},
                      hour=datetime.datetime.now().hour, minute=datetime.datetime.now().minute + 1)
    scheduler.add_job(send_message_wednesday, trigger='cron', kwargs={'bot' : bot},
                      hour=datetime.datetime.now().hour, minute=datetime.datetime.now().minute + 1)
    scheduler.add_job(send_message_thursday, trigger='cron', kwargs={'bot' : bot},
                      hour=datetime.datetime.now().hour, minute=datetime.datetime.now().minute + 1)
    scheduler.add_job(send_message_friday, trigger='cron', kwargs={'bot' : bot},
                      hour=datetime.datetime.now().hour, minute=datetime.datetime.now().minute + 1)
    scheduler.add_job(send_message_saturday, trigger='cron', kwargs={'bot' : bot},
                      hour=datetime.datetime.now().hour, minute=datetime.datetime.now().minute + 1)
    scheduler.start()#–ò–õ–Æ–®–ê –Ø –ó–ê–ï–ë–ê–õ–°–Ø –ì–û –®–¢–£–†–í–ê–õ–û–ú –ü–û–î–†–û–ß–ò–ú –î–†–£–ì –î–†–£–ì–£


if __name__ == '__main__':
    schedule_messages()
    executor.start_polling(dp, skip_updates=True)
