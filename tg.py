import asyncio
from data import monday,tuesday,wednesday,thursday,friday,saturday
import sqlite3
import aioschedule
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.background import BackgroundScheduler


TOKEN_API = '5974312085:AAFXoviRvo7w6FRUg9mdkMGN7E19dJzhd0I'

bot = Bot(TOKEN_API)
dp = Dispatcher(bot)

# Connect to the SQLite database
conn = sqlite3.connect('subscribers.db')
c = conn.cursor()

# Create the subscribers table if it doesn't exist
c.execute('''CREATE TABLE IF NOT EXISTS subscribers (chat_id INTEGER PRIMARY KEY)''')

ckb = InlineKeyboardMarkup(row_width=2)
ckb.add(InlineKeyboardButton('–ù–∞–∑–∞–¥üë®üèº‚Äçü¶Ω',callback_data='Back'))

kb = ReplyKeyboardMarkup()
kb.add(KeyboardButton('üòì–ü–æ–º–æ–≥–∏ –º–Ω–µüòì'))
kb.add(KeyboardButton('ü§ó–ó–∞—á–µ–º —è –Ω—É–∂–µ–Ωü§ó'))
kb.add(KeyboardButton('ü•∂–®–∫–æ–ª–∞ü•∂'))
kb.add(KeyboardButton('üß†–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—Éüß†'))

HELP_COMMAND = """
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/description - —á—Ç–æ —è —É–º–µ—é
/School schedule - —à–∫–æ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""


@dp.message_handler(lambda message:message.text == 'üß†–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—Éüß†')
async def subscribe(message:types.Message):
    chat_id = message.from_user.id
    c.execute("INSERT INTO subscribers (chat_id) VALUES (?)", (chat_id,))
    conn.commit()
    await message.reply("üëçüèº–í–´ –°–î–ï–õ–ê–õ–ò –ê–•–£–ï–ù–ù–ûüëçüèº")



@dp.message_handler(lambda message: message.text == '–ó–∞—á–µ–º —è –Ω—É–∂–µ–Ωü§ó')
async def help_command(message: types.Message):
    await message.answer('<em><b>–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –≤–∞—à–µ–º —à–∫–æ–ª—å–Ω–æ–º —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ</b></em>',
                         parse_mode="HTML")
    await message.delete()


@dp.message_handler(lambda message: message.text == '–ü–æ–º–æ–≥–∏ –º–Ω–µüòì')
async def help_command(message: types.Message):
    await message.answer(text=f'<em><b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</b></em>\n{HELP_COMMAND}', parse_mode="HTML", )
    await message.delete()


@dp.message_handler(commands=['start'])
async def help_command(message: types.Message):
    await message.answer(text='<em><b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç!</b></em>', parse_mode="HTML",
                         reply_markup=kb)
    await bot.send_sticker(message.from_user.id,
                           sticker="CAACAgIAAxkBAAEHZFtjzbsMSGolpDRLUuP7ZWNekwXGlwACJQkAAlZjuEkTBHGd_SLd0S0E")
    await message.delete()


@dp.message_handler(lambda message: message.text == 'üß†–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—Éüß†')
async def help_command(message: types.Message):
    await message.answer('<em><b>–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –≤–∞—à–µ–º —à–∫–æ–ª—å–Ω–æ–º —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ</b></em>',
                         parse_mode="HTML")
    await message.delete()

@dp.message_handler(lambda message: message.text == '–®–∫–æ–ª–∞ü•∂')
async def help_command(message: types.Message):
    ikb = InlineKeyboardMarkup(row_width=2)
    ikb.add(InlineKeyboardButton('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ü•≥',
                                 callback_data='Monday'))
    ikb.add(InlineKeyboardButton('–í—Ç–æ—Ä–Ω–∏–∫ü´°',
                                 callback_data='Tuesday'))
    ikb.add(InlineKeyboardButton('–°—Ä–µ–¥–∞ü´•',
                                 callback_data='Wednesday'))
    ikb.add(InlineKeyboardButton('–ß–µ—Ç–≤–µ—Ä–≥ü§¢',
                                 callback_data='Thursday'))
    ikb.add(InlineKeyboardButton('–ü—è—Ç–Ω–∏—Ü–∞ü•±',
                                 callback_data='Friday'))
    ikb.add(InlineKeyboardButton('–°—É–±–±–æ—Ç–∞üë∫',
                                 callback_data='Saturday'))
    await message.answer('<em><b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b></em>', parse_mode="HTML",
                         reply_markup=ikb)
    await message.delete()


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'Monday')
async def M(callback: types.CallbackQuery):
    await callback.message.answer(
        text=monday,
        parse_mode="HTML",
        reply_markup=ckb)
    await callback.message.delete()


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'Tuesday')
async def M(callback: types.CallbackQuery):
    await callback.message.answer(
        text=tuesday,
        parse_mode="HTML",
        reply_markup=ckb)
    await callback.message.delete()


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'Wednesday')
async def M(callback: types.CallbackQuery):
    await callback.message.answer(
        text=wednesday,
        parse_mode="HTML",
        reply_markup=ckb)
    await callback.message.delete()


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'Thursday')
async def M(callback: types.CallbackQuery):
    await callback.message.answer(
        text=thursday,
        parse_mode="HTML",
        reply_markup=ckb)
    await callback.message.delete()


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'Friday')
async def M(callback: types.CallbackQuery):
    await callback.message.answer(
        text=friday,
        parse_mode="HTML",
        reply_markup=ckb)
    await callback.message.delete()


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'Saturday')
async def M(callback: types.CallbackQuery):
    await callback.message.answer(
        text=saturday,
        parse_mode="HTML",
        reply_markup=ckb)
    await callback.message.delete()


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'Back')
async def C(callback: types.CallbackQuery):
    ikb = InlineKeyboardMarkup(row_width=2)
    ikb.add(InlineKeyboardButton('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ü•≥',
                                 callback_data='Monday'))
    ikb.add(InlineKeyboardButton('–í—Ç–æ—Ä–Ω–∏–∫ü´°',
                                 callback_data='Tuesday'))
    ikb.add(InlineKeyboardButton('–°—Ä–µ–¥–∞ü´•',
                                 callback_data='Wednesday'))
    ikb.add(InlineKeyboardButton('–ß–µ—Ç–≤–µ—Ä–≥ü§¢',
                                 callback_data='Thursday'))
    ikb.add(InlineKeyboardButton('–ü—è—Ç–Ω–∏—Ü–∞ü•±',
                                 callback_data='Friday'))
    ikb.add(InlineKeyboardButton('–°—É–±–±–æ—Ç–∞üë∫',
                                 callback_data='Saturday'))
    await callback.message.answer('<em><b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b></em>', parse_mode="HTML",
                                  reply_markup=ikb)
    await callback.message.delete()


def send_message(chat_id: int, message: str):
    bot.send_message(chat_id=chat_id, text=message)


def schedule_messages():
    cursor = conn.cursor()
    cursor.execute("SELECT chat_id FROM subscribers")
    chat_ids = cursor.fetchall()
    cursor.close()
    conn.close()
    scheduler = BackgroundScheduler()
    scheduler.add_job(send_message, 'interval', (chat_ids, monday),
                          start_date='2023-01-23 06:30:00', end_date='2023-12-31 06:30:00',
                          day_of_week='mon')
    scheduler.add_job(send_message, 'interval', (chat_ids, tuesday),
                          start_date='2023-01-24 06:30:00', end_date='2023-12-31 06:30:00',
                          day_of_week='tue')
    scheduler.add_job(send_message, 'interval', (chat_ids, wednesday),
                          start_date='2023-01-25 06:30:00', end_date='2023-12-31 06:30:00',
                          day_of_week='wed')
    scheduler.add_job(send_message, 'interval', (chat_ids, thursday),
                          start_date='2023-01-26 06:30:00', end_date='2023-12-31 06:30:00',
                          day_of_week='thu')
    scheduler.add_job(send_message, 'interval', (chat_ids, friday),
                          start_date='2023-01-27 06:30:00', end_date='2023-12-31 06:30:00',
                          day_of_week='fri')
    scheduler.add_job(send_message, 'interval', (chat_ids, saturday),
                          start_date='2023-01-28 06:30:00', end_date='2023-12-31 06:30:00',
                          day_of_week='sat')
    scheduler.start()



if __name__ == '__main__':
    schedule_messages()
    executor.start_polling(dp, skip_updates=True)
